#include <iostream>
#include "zhcpp.h"

类 人{
    公开成员:
        字符串 名字;
        人() {
            名字 设为 "未定义";
        }
};

双精度 平方(双精度 数) {
    返回 数 乘 数;
}

整数 获取曼德博集合迭代数(双精度 原坐标甲, 双精度 原坐标乙, 整数 最大迭代数) {
    双精度 甲 设为 原坐标甲;
    双精度 乙 设为 原坐标乙;
    双精度 距离 设为 平方(甲) 加 平方(乙);
    整数 迭代数 设为 1;
    只要 (距离 小于 4 以及 迭代数 小于 最大迭代数) {
        距离 设为 平方(甲) 加 平方(乙);
        双精度 丙 设为 平方(甲) 减 平方(乙);
        乙 设为 2 乘 甲 乘 乙 加 原坐标乙;
        甲 设为 丙 加 原坐标甲;
        迭代数 增加;
    }
    返回 迭代数;
}

无类型 绘制曼德博集合() {
    常量 整数 最大迭代数 设为 1000;
    对于 (双精度 乙 设为 - 2; 乙 小于 2; 乙 加上 0.1) {
        对于 (双精度 甲 设为 - 2; 甲 小于 2; 甲 加上 0.1) {
            如果 (获取曼德博集合迭代数(甲, 乙, 最大迭代数) 小于 最大迭代数)
                格式化输出("一");
            否则
                格式化输出("赢");
        }
        格式化输出(换行符);
    }
}

整数 斐波那契(整数 下标) {
    返回 下标 小于等于 1 则 1 不然 斐波那契(下标 减 1) 加 斐波那契(下标 减 2);
}

无类型 调用函数示例() {
    绘制曼德博集合();
    整数 斐波那契十 设为 斐波那契(10);
    格式化输出("%d\n", 斐波那契十);
}

无类型 面向对象示例() {
    人 你 设为 人();
    标准输出 << 你 的 名字;
}

整数 主程序()
{
    调用函数示例();
    面向对象示例();
    返回 0;
}
